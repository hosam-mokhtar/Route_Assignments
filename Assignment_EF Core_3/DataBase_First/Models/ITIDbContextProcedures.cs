// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using DataBase_First.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DataBase_First.Models
{
    public partial class ITIDbContext
    {
        private IITIDbContextProcedures? _procedures;

        public virtual IITIDbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ITIDbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IITIDbContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class ITIDbContextProcedures : IITIDbContextProcedures
    {
        private readonly ITIDbContext _context;

        public ITIDbContextProcedures(ITIDbContext context)
        {
            _context = context;
        }

        public virtual async Task<List<getNumberOfStudentPerDepartmentResult>?> getNumberOfStudentPerDepartmentAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getNumberOfStudentPerDepartmentResult>("EXEC @returnValue = [dbo].[getNumberOfStudentPerDepartment]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_GetDataOfStudentByIdResult>?> SP_GetDataOfStudentByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GetDataOfStudentByIdResult>("EXEC @returnValue = [dbo].[SP_GetDataOfStudentById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_GetStudentDataByStudentAddressResult>?> SP_GetStudentDataByStudentAddressAsync(string? address, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 50,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GetStudentDataByStudentAddressResult>("EXEC @returnValue = [dbo].[SP_GetStudentDataByStudentAddress] @address = @address", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_UpdateNewEmployeeResult>?> SP_UpdateNewEmployeeAsync(int? oldEmp, int? newEmp, int? pNum, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OldEmp",
                    Value = oldEmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewEmp",
                    Value = newEmp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PNum",
                    Value = pNum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_UpdateNewEmployeeResult>("EXEC @returnValue = [dbo].[SP_UpdateNewEmployee] @OldEmp = @OldEmp, @NewEmp = @NewEmp, @PNum = @PNum", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpDeleteTopicbyIdResult>?> SpDeleteTopicbyIdAsync(int? topId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TopId",
                    Value = topId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpDeleteTopicbyIdResult>("EXEC @returnValue = [dbo].[SpDeleteTopicbyId] @TopId = @TopId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
